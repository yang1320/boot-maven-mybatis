配置：
	注意：
		Spring Boot 对静态资源映射提供了默认配置
		Spring Boot 默认将 /** 所有访问映射到以下目录：
			classpath:/static
			classpath:/public
			classpath:/resources
			classpath:/META-INF/resources
			手动指明配置后，会使Spring Boot的默认配置失效，也就是说，/public /resources 等默认配置不能使用。

	资源获取：结合打包方式及最终打包后的目录结构而定;jar运行涉及target\classes目录、war运行涉及WEB-INF\classes目录
		打包后结构参见target目录。可以依据路径的相对关系获取资源位置：
			this.getClass().getResource("/static/uploadAndDown/");	---部署时相对于类路径的位置
		war:E:\install1\tomcat\apache-tomcat-8.0.1\webapps\boot-maven-mybatis\WEB-INF\classes
		jar:E:\Users\yang\workspace\boot-maven-mybatis\target\boot-maven-mybatis\BOOT-INF\classes
		
	日志：
		springboot推荐的日志类库是slf4j、日志系统为logback	
		log4j.rootLogger=info,error,DEBUG,CONSOLE //注意顺序位置，CONSOLE放最后即所有信息控制台都会参与输出
		详见：http://blog.csdn.net/dr_guo/article/details/50718063
		使用第三方jar使日志控制台彩色输出，可能发生乱码：如日志记录到数据库
		log4j.properties 配置 jdbc.url不使用带参否则在linux部署会发生JDK安全错误（可解决？）
		
其他：
	调用请求方法时不传递请求参数时且参数@RequestParam(required=false)默认为null
	@RestController注解相当于@ResponseBody ＋ @Controller合在一起的作用。


请求/响应：浏览器中转请求过快无法捕获，可以通过限速暂停控制台获取请求及数据。


跨域访问：
	传统情况下在java代码里访问restful服务，一般使用Apache的HttpClient。不过此种方法使用起来太过繁琐。
	spring提供了一种简单便捷的模板类来进行操作，这就是RestTemplate。

	摘要：http://www.jianshu.com/p/c9644755dd5e
	接口提供方的类或接口需使用@RestController修饰,对应的方法参数要用@RequestBody修饰
	
	说明:Spring提供的RestTemplate可用于访问Rest服务的客户端，其提供了多种便捷访问远程Http服务的方法，但其并没有实现异步调用的功能。
		Spring4.0提供的AsyncRestTemplate，该类可实现异步非阻塞处理http请求。
	

	
Mybaits:xml
	resultType="String" 对应的一条记录的返回类型。 parameterType="int" 对应的是传入参数的类型
	
	
	mybatis默认是属性名和数据库字段名一一对应的，即 
		数据库表列：user_name 
		实体类属性：user_name
	但是java中一般使用驼峰命名 
		数据库表列：user_name 
		实体类属性：userName
	在Springboot中，可以通过设置map-underscore-to-camel-case属性为true来开启驼峰功能。
	
	
上传下载：
	SpringMVC异常：org.springframework.web.multipart.MultipartException: The current request is not a multipart request
	1，此异常出现在使用springmvc做文件上传的时候
	2，原因是form的属性没有设置正确，必须是enctype="multipart/form-data" method="post" ,get是不能做文件上传的
	
	上传：取得文本域对象Multipart(Servlet中为FileItem),获取输入流,创建文件、输出流。创建字节缓存数组，写入输出流。
	下载：根据response取得ServletOutputStream，输出字节流。
			//response默认编码与web容器设置有关，默认ISO-8859-1.
		//当向页面输出的是字节流时不用设置编码格式，否则需要设置编码（针对中文时）
		
		

打包运行：
	jar 或者war。需要插件：maven为spring-boot-maven-plugin。 
	部署：war包放置于Servlet容器相应位置 如Tomcat为webapps目录； jar使用java -jar命令运行。
	
	spring boot打成jar包了,但是webapp下面的jsp页面无法访问：由于jar 、war打包后目录结构不同(仅web-inf 和boot-inf结构不同？)，
	导致访问不了jar中jsp资源,可以使用war+servlet容器运行 或者  使用java -jar XXX.war 的方式运行即可。
	
	
SVN:冲突出现原因总结起来一句话：在不同版本的同一个位置出现了不同的东西。
	具体解释如下：

	版本：每一次提交都会是当前项目的一个版本，会有一个编号；
	不同版本：冲突一定是出现在不同版本间的，通常是出现在相隔两个版本号的两个版本之间；
	同一个位置：这里指的是同一个文件路径，或者同一个文件路径下同一个文件中的同一行等；
	不同的东西：这里说的是不同的代码，或者不同的路径，或者不同的文件；
	
	
	
springboot 两种运行方式的不同，两种打包（jar\war）后项目结构的不同;
jar运行：显示页面html中的资源引用是相对运行项目的路径的

构建项目结构出错时，尝试project facets重构 项目。

使用thymeleaf模板返回路径字符串不需加前缀"/"（当于根模板路径拼接时会自动添加？？？）,否则离开IDE环境运行要报错。
		